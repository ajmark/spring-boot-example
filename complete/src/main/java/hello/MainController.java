package hello;

import hello.Util.OutOfStockException;
import hello.Util.Response;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.Collection;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called customerRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private CustomerRepository customerRepository;

	@Autowired
	private TshirtRepository tshirtRepository;

	@Autowired
	private TshirtOrderRepository orderRepository;

	@PostMapping(path="/addCustomer") // Map ONLY POST Requests
	public @ResponseBody Object addNewUser (
			@RequestParam String firstName,
			@RequestParam String lastName,
			@RequestParam String email) {
		
		Customer customer = new Customer();
		customer.setFirstName(firstName);
		customer.setLastName(lastName);
		customer.setEmail(email);
		customerRepository.save(customer);

		return customer;
	}
	
	@GetMapping(path="/customers")
	public @ResponseBody Iterable<Customer> getAllUsers() {
		// This returns a JSON or XML with the users
		return customerRepository.findAll();
	}

	@GetMapping(path="/customer/{id}")
	public @ResponseBody Object getCustomerById(@PathVariable(value = "id") Long id) {
		Customer customer = customerRepository.findOne(id);
		return customer;
	}

	@DeleteMapping(path="/delete/customer/{id}")
	public @ResponseBody Object deleteCustomer(@PathVariable(value = "id") Long id){
		Customer customer = customerRepository.findOne(id);
		customerRepository.delete(customer);
		return customer;
	}

	@GetMapping(path="/customer/{id}/orders")
	public @ResponseBody Object getOrdersByCustomer(@PathVariable(value = "id") Long id) {
		Collection<TshirtOrder> orders = orderRepository.findByCustomerId(id);
		return orders;
	}

	@GetMapping(path="/tshirts")
	public @ResponseBody Iterable<Tshirt> getAllTshirts() {
		return tshirtRepository.findAll();
	}

	@GetMapping(path="/tshirt/{id}")
	public @ResponseBody Object getTshirtById(@PathVariable(value = "id") Long id) {
		return tshirtRepository.findOne(id);
	}

	@PostMapping(path="/inventory/editTshirt")
	public @ResponseBody Object editTshirt(
			@RequestParam Long id,
			@RequestParam String size,
			@RequestParam String description,
			@RequestParam Integer count,
			@RequestParam String sku
	) {

		Tshirt tshirt = tshirtRepository.findOne(id);
		tshirt.setSize(size);
		tshirt.setDescription(description);
		tshirt.setCount(count);
		tshirt.setSku(sku);
		tshirtRepository.save(tshirt);

		return tshirt;
	}

	@PostMapping(path="/addTshirt")
	public @ResponseBody Object addTshirt (
			@RequestParam String size,
			@RequestParam String description,
			@RequestParam Integer count,
			@RequestParam String sku
	) {

		Tshirt tshirt = new Tshirt();

		tshirt.setSize(size);
		tshirt.setDescription(description);
		tshirt.setCount(count);
		tshirt.setSku(sku);
		tshirtRepository.save(tshirt);

		return tshirt;
	}

	@DeleteMapping(path="/delete/tshirt/{id}")
	public @ResponseBody Object deleteTshirt(@PathVariable(value = "id") Long id){
		Tshirt tshirt = tshirtRepository.findOne(id);
		tshirtRepository.delete(tshirt);
		return tshirt;
	}

	@GetMapping(path="/orders")
	public @ResponseBody Iterable<TshirtOrder> getAllOrders() {
		return orderRepository.findAll();
	}

	@GetMapping(path="/order/{id}")
	public @ResponseBody Object getOrderById(@PathVariable(value = "id") Long id) {
		return orderRepository.findOne(id);
	}

	@PostMapping(path="order/editOrder")
	public @ResponseBody Object editOrder(
			@RequestParam Long orderId,
			@RequestParam Long tshirtId,
			@RequestParam Long customerId,
			@RequestParam String address1,
			@RequestParam String address2,
			@RequestParam String city,
			@RequestParam String stateOrProvince,
			@RequestParam String postalCode,
			@RequestParam String country,
			@RequestParam String status
	) {

		TshirtOrder order = orderRepository.findOne(orderId);
		Tshirt tshirt = tshirtRepository.findOne(tshirtId);
		Customer customer = customerRepository.findOne(customerId);

		order.setTshirt(tshirt);
		order.setCustomer(customer);
		order.setAddress1(address1);
		order.setAddress2(address2);
		order.setCity(city);
		order.setStateOrProvince(stateOrProvince);
		order.setPostalCode(postalCode);
		order.setCountry(country);
		order.setStatus(status);
		orderRepository.save(order);

		return order;
	}

	@PostMapping(path="/createOrder")
	public @ResponseBody Object createOrder (
			@RequestParam Long tshirtId,
			@RequestParam Long customerId,
			@RequestParam String address1,
			@RequestParam String address2,
			@RequestParam String city,
			@RequestParam String stateOrProvince,
			@RequestParam String postalCode,
			@RequestParam String country,
			@RequestParam String status ) throws OutOfStockException {

		try {

			Tshirt tshirt = tshirtRepository.findOne(tshirtId);
			Customer customer = customerRepository.findOne(customerId);
			if (tshirt != null && customer != null) {
				if (tshirt.getCount() > 0) {

					TshirtOrder order = new TshirtOrder();
					order.setTshirt(tshirt);
					order.setCustomer(customer);
					order.setAddress1(address1);
					order.setAddress2(address2);
					order.setCity(city);
					order.setStateOrProvince(stateOrProvince);
					order.setPostalCode(postalCode);
					order.setCountry(country);
					order.setStatus(status);
					orderRepository.save(order);

					//saves the order and reduces the inventory count of the type of tshirt
					tshirt.setCount(tshirt.getCount()-1);
					tshirtRepository.save(tshirt);

					return order;
				} else {
					throw new OutOfStockException("Unable to place order! Tshirt is out of stock.");
				}
			}
		} catch (OutOfStockException e) {
			throw e;
		}

		return "Unable to place order!";
	}

	@DeleteMapping(path="/delete/order/{id}")
	public @ResponseBody Object deleteOrder(@PathVariable(value = "id") Long id){
		TshirtOrder order = orderRepository.findOne(id);
		orderRepository.delete(order);
		return order;
	}

	@GetMapping(path="/order/{id}/orderStatus")
	public @ResponseBody Object getOrderStatus(@PathVariable(value = "id") Long id) {
		TshirtOrder order = orderRepository.findOne(id);

		if (order != null) {
			return new Response ("BL-100", order.getId().toString(), order.getStatus());
		} else {
			return new Response ("BL-101", null, "Unable to find order!");
		}
	}
}
