package hello;

import hello.services.TshirtOrderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@Autowired
	private TshirtRepository tshirtRepository;

	@Autowired
	private TshirtOrderRepository orderRepository;

	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}
	
	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	@GetMapping(path="/tshirts")
	public @ResponseBody Iterable<Tshirt> getAllTshirts() {
		return tshirtRepository.findAll();
	}

	@PostMapping(path="/addTshirt")
	public @ResponseBody Object addTshirt (
			@RequestParam String size,
			@RequestParam String description,
			@RequestParam Integer count) {

		Tshirt tshirt = new Tshirt();

		tshirt.setSize(size);
		tshirt.setDescription(description);
		tshirt.setCount(count);
		tshirtRepository.save(tshirt);

		return tshirt;
	}

	@GetMapping(path="/orders")
	public @ResponseBody Iterable<TshirtOrder> getAllOrders() {
		return orderRepository.findAll();
	}

	@PostMapping(path="/createOrder")
	public @ResponseBody Object createOrder (
			@RequestParam Long tshirtId,
			@RequestParam String email,
			@RequestParam String name,
			@RequestParam String address1,
			@RequestParam String address2,
			@RequestParam String city,
			@RequestParam String stateOrProvince,
			@RequestParam String postalCode,
			@RequestParam String country ) {

		try {

			EntityManagerFactory emf = Persistence.createEntityManagerFactory("TshirtOrderService");
			EntityManager em = emf.createEntityManager();

			TshirtOrderService service = new TshirtOrderService(em);

			TshirtOrder order = service.createTshirtOrder(tshirtId, email, name, address1, address2, city,
					stateOrProvince,postalCode, country);

			if (order != null) {
				return order;
			}
		} catch (Exception e) {
			return e;
		}
			return "Unable to place order!";
		};
	}
